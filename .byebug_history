quit
vote.id
@vote.id
@vote
quit
vote
@vote[:liked]
@vote.liked
@vote
quit
vote.id
vote.load
vote.id
vote
vote[:liked]
vote[:;oi
vote.liked
\vote.liked
vote.liked
vote[0]
vote
quit
vote[0]
vote.liked == false
note
vote.nil?
vote.liked
vote.like
vote.liked?
vote
quit
q
quit
[AVote
aVote.where(user_id: uid)
asd
tid
uid
Vote.v
quit
@user.authenticate('12345678')
@user.authenticate(params[:password])
@user.authenticate
@user
quit
BCrypt::Password.new(pass) == 'foo'
pass = BCrypt::Password.create('foo')
BCrypt::Password.new(@user.pw_hash)
BCrypt::Password.new(@user.pw_hash) == 'testtest '
BCrypt::Password.new(@user.pw_hash) == 'testtest 
BCrypt::Password.new(@user.pw_hash) == 'testtest\n'
BCrypt::Password.new(@user.pw_hash) == 'test'
BCrypt::Password.new(@user.pw_hash) == 'testtest'
@user.pw_hash
sa
pass
BCrypt::Password.new(pass) == 'foo'
BCrypt::Password.new(pass).length
@user.pw_hash.length
BCrypt::Password.new(pass).length
BCrypt::Password.new(pass) == 'foo'
BCrypt::Password.new(pass)
pass = BCrypt::Password.create('foo')
@user.pw_hash == params[:password]
@user.pw_hash
BCrypt::Password.new(@user.pw_hash)
BCrypt::Password.new(@user.pw_new)
BCrypt::Password.new()
BCtypt
@user.is_password?(params[:password])
@user.pw_hash
quit
@user
@user.password
quit
@user.pw_hash
@user.password
@user.is_password?(params[:password])
@user.is_password(params[:password])
Password
require 'bcrypt'
Password
@user
quit
ag
ag = BCrypt::Password.new(pass)
pass
pass = BCrypt::Password.new(@user.pw_hash)
pass = BCrypt::Password.new(@user.password)
@user.password
BCrypt::Password.new(@user.password)
BCrypt::Password.new('hey')
BCrypt::Password.new(params[:password])
BCrypt::Password.new(params[:password]
BCrypt
Password
include 'bcrypt'
include BCrypt
require 'bcrypt'
params[:password]
@user.password
quit
include 'bcrypt-ruby'
include 'bcrypt'
Password
require 'bcrypt'
require 'bcrypt-ruby'
require 'BCrypt'
@user.password == params[:password]
Password
@user.password
params[:password]
quit
s
params[:password]
@user_hash
quit
params[:password]
@user_hash
@user.password
@user
exit
user
@user
y
exit
pw_attempt
@user.password
quit
@user.password
BCrypt::Engine.hash_secret(params[:password], @user.salt)
params[:password]
quit
@user.password
@user.salt
BCrypt::Engine.hash_secret(params[:password], @user.salt)
params[:password]
@user.password
quit
s
@user
quit
s
uid
tid
quit
Track.find('4')
Track.find(4)
Tracks.find(4)
Tracks.find('4')
id
quit
n
quit
s
@user
User.find_by(email: 'joelkbennett@gmail.com')
User.find
params[:email]
